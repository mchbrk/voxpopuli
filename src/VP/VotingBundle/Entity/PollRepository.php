<?php

namespace VP\VotingBundle\Entity;

use Doctrine\ORM\EntityRepository;
//use VP\VotingBundle\Entity\Vote;
//use VP\VotingBundle\Entity\Preference;

/**
 * PollRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PollRepository extends EntityRepository
{
    public function SimplePlurality($id){
        $em = $this->getEntityManager();
        $poll = $em->getRepository('VPVotingBundle:Poll')->find($id);
        if (!$poll) {
            throw $this->createNotFoundException('Unable to find Poll entity.');
        }
        $query = $this->getEntityManager()->createQuery("SELECT P, A, COUNT(P) as C 
                                                        FROM VPVotingBundle:Preference P 
                                                        LEFT JOIN P.vote V
                                                        LEFT JOIN P.answer A
                                                        where P.rank=1 AND V.poll = :poll 
                                                        group by P.answer order by C DESC")
                                          ->setParameter('poll', $poll);
        $res = $query->getResult();
        $result = array();
        foreach ($res as $r){
            $result[$r[0]->getAnswer()->getId()] = $r["C"]; 
        }

        return $result;
    }

    public function PluralityWithRunoff($id){
        $em = $this->getEntityManager();
        $poll = $em->getRepository('VPVotingBundle:Poll')->find($id);
        if (!$poll) {
            throw $this->createNotFoundException('Unable to find Poll entity.');
        }
        $result = $this->SimplePlurality($id);
        $highestRes =max($result);
        $sum = array_sum($result);
        if($highestRes/$sum >= 0.5){
           return false;
        }else{
            $answer_ids = array_keys($result);
            $option1 = $answer_ids[0];
            $option2 = $answer_ids[1];

            $em = $this->getEntityManager();
            $poll = $em->getRepository('VPVotingBundle:Poll')->find($id);
            $query = $this->getEntityManager()->createQuery("SELECT P
                                                            FROM VPVotingBundle:Preference P
                                                            LEFT JOIN P.vote V
                                                            LEFT JOIN P.answer A1
                                                            LEFT JOIN P.answer A2
                                                            where V.poll =:poll AND A1.id = :option1 OR A2.id = :option2 
                                                            ")
                                              ->setParameter('poll', $poll)
                                              ->setParameter('option1', $option1)
                                              ->setParameter('option2', $option2);
            $preferences = $query->getResult();  
            $votes = array();
            for ($i=0; $i<count($preferences); $i++){
                $vote = $preferences[$i]->getVote()->getId();
                if ($preferences[$i]->getAnswer()->getId() == $option1){
                    $votes[$vote][$option1] = $preferences[$i]->getRank();
                }elseif($preferences[$i]->getAnswer()->getId() == $option2){
                    $votes[$vote][$option2] = $preferences[$i]->getRank();
                }
            }
            $votesfor1 = 0;
            $votesfor2 = 0;
            foreach ($votes as $vote => $result){
                if($result[$option1] < $result [$option2]){
                    $votesfor1++;
                }else{
                    $votesfor2++;
                }
            }
           

            return array($option1 => $votesfor1, $option2=>$votesfor2);
            }
        }

    public function BordaCount($id){
        $em = $this->getEntityManager();
        $poll = $em->getRepository('VPVotingBundle:Poll')->find($id);
        if (!$poll) {
            throw $this->createNotFoundException('Unable to find Poll entity.');
        }
        $query = $this->getEntityManager()->createQuery("SELECT P
                                                            FROM VPVotingBundle:Preference P
                                                            LEFT JOIN P.vote V
                                                            where V.poll =:poll 
                                                            ")
                                              ->setParameter('poll', $poll);                                      
    $preferences = $query->getResult(); 
    $answers = $poll->getAnswers();
    $bordaCount = array();
    for ($i=0; $i<count($answers); $i++){
        $bordaCount[$answers[$i]->getId()] = 0;
        } 

    return $bordaCount;

    }

    public function RandomBallot($id){
        $em = $this->getEntityManager();
        $poll = $em->getRepository('VPVotingBundle:Poll')->find($id);
        if (!$poll) {
            throw $this->createNotFoundException('Unable to find Poll entity.');
        }
        $query = $this->getEntityManager()->createQuery("SELECT V
                                                            FROM VPVotingBundle:Vote V
                                                            where V.poll = :poll 
                                                            ")
                                              ->setParameter('poll', $poll);
                                        
        $votes = $query->getResult();
        $lucky = rand(0, count($votes)-1);

        $query2 = $this->getEntityManager()->createQuery("SELECT P
                                                      FROM VPVotingBundle:Preference P
                                                      where P.vote = :vote AND P.rank=1
                                                        ")
                                        ->setParameter('vote', $votes[$lucky]);
        $winner_preference = $query2->getResult();
        $winner = $winner_preference[0]->getAnswer();
        return $winner; 
    }


       

}
